function main=main()
% command line: 
%      'KaDE' 'unary4.ka' '-d' 'output' '--max-size-for-species' '10' '-syntax''3'
%% THINGS THAT ARE KNOWN FROM KAPPA FILE AND KaSim OPTIONS:
%% 
%% init - the initial abundances of each species and token
%% tinit - the initial simulation time (likely 0)
%% tend - the final simulation time 
%% initialstep - initial time step at the beginning of numerical integration
%% maxstep - maximal time step for numerical integration
%% reltol - relative error tolerance;
%% abstol - absolute error tolerance;
%% period - the time period between points to return
%%
%% variables (init(i),y(i)) denote numbers of embeddings 
%% rule rates are corrected by the number of automorphisms in the lhs of rules


tinit=0;
tend=1;
initialstep=1e-05;
maxstep=0.02;
reltol=0.001;
abstol=0.001;
period=0.01;
nonnegative=false;

global nodevar
nodevar=7;
global max_stoc_coef
max_stoc_coef=0;
nvar=2;
nobs=2;
nrules=2;

global var
var=zeros(nvar,1);
global init
init=sparse(nodevar,1);
stoc=zeros(nrules,max_stoc_coef);
global k
global kd
global kun
global kdun
global stoc

k=zeros(nrules,1);
kd=zeros(nrules,1);
kun=zeros(nrules,1);
kdun=zeros(nrules,1);
global jacvar
jacvar=sparse(nvar,nodevar);
global jack
global jackd
global jackun
global jackund
global jacstoc

jack=zeros(nrules,nodevar);
jackd=zeros(nrules,nodevar);
jackun=zeros(nrules,nodevar);
jackund=zeros(nrules,nodevar);

t = 0.000000;

init(7)=t;
init(1)=10; % A(x[1] y[.]), B(x[1] y[.])
var(1)=init(3); % goal

k(1)=5; % A(x[_] y[.]), B(y[.]), . -> A(x[_] y[1]), B(y[1]), C()

uiIsOctave = false;
uiIsMatlab = false;
LIC = license('inuse');
for elem = 1:numel(LIC)
    envStr = LIC(elem).feature
    if strcmpi(envStr,'octave')
       LICname=envStr;
       uiIsOctave = true;
       break
    end
    if strcmpi(envStr,'matlab')
       LICname=envStr
       uiIsMatlab = true;
       break
    end
end


if nonnegative 
   options = odeset('RelTol', reltol, ...
                    'AbsTol', abstol, ...
                    'InitialStep', initialstep, ...
                    'MaxStep', maxstep, ...
                    'Jacobian', @ode_jacobian, ...
                   'NonNegative', [1:1:6]);
else
   options = odeset('RelTol', reltol, ...
                    'AbsTol', abstol, ...
                    'InitialStep', initialstep, ...
                    'MaxStep', maxstep, ...
                    'Jacobian', @ode_jacobian);
end


if nonnegative
   if uiIsMatlab
      soln =  ode15s(@ode_aux,[tinit tend],ode_init(),options);
      soln.y=soln.y';
      vt = soln.x;
      vy = soln.y;
   elseif uiIsOctave
      [vt,vy] = ode23s(@ode_aux,[tinit tend],ode_init(),options);
   end
else
   if uiIsMatlab
      soln =  ode15s(@ode_aux,[tinit tend],ode_init(),options);
      soln.y=soln.y';
      vt = soln.x;
      vy = soln.y;
   elseif uiIsOctave
      soln = ode2r(@ode_aux,[tinit tend],ode_init(),options);
      vt = soln.x;
      vy = soln.y;
   end
end;


nrows = length(vt);

tmp = zeros(nodevar,1);

n_points = floor ((tend-tinit)/period)+1;
t = linspace(tinit, tend, n_points);
obs = zeros(nrows,nobs);

for j=1:nrows
    for i=1:nodevar
        z(i)=vy(j,i);
    end
    h=ode_obs(z);
    for i=1:nobs
        obs(j,i)=h(i);
    end
end
if nobs==1
   y = interp1(vt, obs, t, 'pchip')';
else
   y = interp1(vt, obs, t, 'pchip');
end


filename = 'data.csv';
fid = fopen (filename,'w');
fprintf(fid,'# KaDE unary4.ka -d output --max-size-for-species 10 -syntax 3\n')
fprintf(fid,'# ')
fprintf(fid,'[T],')
fprintf(fid,'goal,')
fprintf(fid,'\n')
for j=1:n_points
    for i=1:nobs
        fprintf(fid,'%f,',y(j,i));
    end
    fprintf(fid,'\n');
end
fclose(fid);


end



function Init=ode_init()

global nodevar
global init
Init=zeros(nodevar,1);

Init(1) = init(1); % A(x[1] y[.]), B(x[1] y[.])
Init(2) = init(2); % A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[.])
Init(3) = init(3); % C()
Init(4) = init(4); % A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[.])
Init(5) = init(5); % A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[6]), B(x[7] y[6]), A(x[7] y[.])
Init(6) = init(6); % A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[6]), B(x[7] y[6]), A(x[7] y[8]), B(x[9] y[8]), A(x[9] y[.])
Init(7) = init(7); % t
end


function dydt=ode_aux(t,y)

global nodevar
global max_stoc_coef
global var
global k
global kd
global kun
global kdun
global stoc

var(1)=y(3); % goal


dydt=zeros(nodevar,1);

% rule    : A(x[_] y[.]), B(y[.]), . -> A(x[_] y[1]), B(y[1]), C()
% reaction: A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[.]) + A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[.]) -> C() + A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[6]), B(x[7] y[6]), A(x[7] y[8]), B(x[9] y[8]), A(x[9] y[.])

dydt(2)=dydt(2)-k(1)*y(2)*y(4);
dydt(4)=dydt(4)-k(1)*y(2)*y(4);
dydt(6)=dydt(6)+k(1)*y(2)*y(4);
dydt(3)=dydt(3)+k(1)*y(2)*y(4);

% rule    : A(x[_] y[.]), B(y[.]), . -> A(x[_] y[1]), B(y[1]), C()
% reaction: A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[.]) + A(x[1] y[.]), B(x[1] y[.]) -> C() + A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[6]), B(x[7] y[6]), A(x[7] y[.])

dydt(1)=dydt(1)-k(1)*y(1)*y(4);
dydt(4)=dydt(4)-k(1)*y(1)*y(4);
dydt(5)=dydt(5)+k(1)*y(1)*y(4);
dydt(3)=dydt(3)+k(1)*y(1)*y(4);

% rule    : A(x[_] y[.]), B(y[.]), . -> A(x[_] y[1]), B(y[1]), C()
% reaction: A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[.]) + A(x[1] y[.]), B(x[1] y[.]) -> C() + A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[6]), B(x[7] y[6]), A(x[7] y[.])

dydt(1)=dydt(1)-k(1)*y(1)*y(4);
dydt(4)=dydt(4)-k(1)*y(1)*y(4);
dydt(5)=dydt(5)+k(1)*y(1)*y(4);
dydt(3)=dydt(3)+k(1)*y(1)*y(4);

% rule    : A(x[_] y[.]), B(y[.]), . -> A(x[_] y[1]), B(y[1]), C()
% reaction: A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[.]) + A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[.]) -> C() + A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[6]), B(x[7] y[6]), A(x[7] y[8]), B(x[9] y[8]), A(x[9] y[.])

dydt(2)=dydt(2)-k(1)*y(2)*y(4);
dydt(4)=dydt(4)-k(1)*y(2)*y(4);
dydt(6)=dydt(6)+k(1)*y(2)*y(4);
dydt(3)=dydt(3)+k(1)*y(2)*y(4);

% rule    : A(x[_] y[.]), B(y[.]), . -> A(x[_] y[1]), B(y[1]), C()
% reaction: A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[6]), B(x[7] y[6]), A(x[7] y[.]) + A(x[1] y[.]), B(x[1] y[.]) -> C() + A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[6]), B(x[7] y[6]), A(x[7] y[8]), B(x[9] y[8]), A(x[9] y[.])

dydt(1)=dydt(1)-k(1)*y(1)*y(5);
dydt(5)=dydt(5)-k(1)*y(1)*y(5);
dydt(6)=dydt(6)+k(1)*y(1)*y(5);
dydt(3)=dydt(3)+k(1)*y(1)*y(5);

% rule    : A(x[_] y[.]), B(y[.]), . -> A(x[_] y[1]), B(y[1]), C()
% reaction: A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[6]), B(x[7] y[6]), A(x[7] y[.]) + A(x[1] y[.]), B(x[1] y[.]) -> C() + A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[6]), B(x[7] y[6]), A(x[7] y[8]), B(x[9] y[8]), A(x[9] y[.])

dydt(1)=dydt(1)-k(1)*y(1)*y(5);
dydt(5)=dydt(5)-k(1)*y(1)*y(5);
dydt(6)=dydt(6)+k(1)*y(1)*y(5);
dydt(3)=dydt(3)+k(1)*y(1)*y(5);

% rule    : A(x[_] y[.]), B(y[.]), . -> A(x[_] y[1]), B(y[1]), C()
% reaction: A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[.]) + A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[.]) -> C() + A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[6]), B(x[7] y[6]), A(x[7] y[.])

dydt(2)=dydt(2)-k(1)*y(2)*y(2);
dydt(2)=dydt(2)-k(1)*y(2)*y(2);
dydt(5)=dydt(5)+k(1)*y(2)*y(2);
dydt(3)=dydt(3)+k(1)*y(2)*y(2);

% rule    : A(x[_] y[.]), B(y[.]), . -> A(x[_] y[1]), B(y[1]), C()
% reaction: A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[.]) + A(x[1] y[.]), B(x[1] y[.]) -> C() + A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[.])

dydt(1)=dydt(1)-k(1)*y(1)*y(2);
dydt(2)=dydt(2)-k(1)*y(1)*y(2);
dydt(4)=dydt(4)+k(1)*y(1)*y(2);
dydt(3)=dydt(3)+k(1)*y(1)*y(2);

% rule    : A(x[_] y[.]), B(y[.]), . -> A(x[_] y[1]), B(y[1]), C()
% reaction: A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[.]) + A(x[1] y[.]), B(x[1] y[.]) -> C() + A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[.])

dydt(1)=dydt(1)-k(1)*y(1)*y(2);
dydt(2)=dydt(2)-k(1)*y(1)*y(2);
dydt(4)=dydt(4)+k(1)*y(1)*y(2);
dydt(3)=dydt(3)+k(1)*y(1)*y(2);

% rule    : A(x[_] y[.]), B(y[.]), . -> A(x[_] y[1]), B(y[1]), C()
% reaction: A(x[1] y[.]), B(x[1] y[.]) + A(x[1] y[.]), B(x[1] y[.]) -> C() + A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[.])

dydt(1)=dydt(1)-k(1)*y(1)*y(1);
dydt(1)=dydt(1)-k(1)*y(1)*y(1);
dydt(2)=dydt(2)+k(1)*y(1)*y(1);
dydt(3)=dydt(3)+k(1)*y(1)*y(1);
dydt(7)=1;

end


function jac=ode_jacobian(t,y)

global nodevar
global max_stoc_coef
global jacvar
global var
global k
global kd
global kun
global kdun
global stoc

global jack
global jackd
global jackun
global jackund
global jacstoc

var(1)=y(3); % goal

jacvar(1,3)=1;


jac=sparse(nodevar,nodevar);

% rule    : A(x[_] y[.]), B(y[.]), . -> A(x[_] y[1]), B(y[1]), C()
% reaction: A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[.]) + A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[.]) -> C() + A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[6]), B(x[7] y[6]), A(x[7] y[8]), B(x[9] y[8]), A(x[9] y[.])

jac(2,2)=jac(2,2)-k(1)*y(4);
jac(2,4)=jac(2,4)-k(1)*y(2);
jac(4,2)=jac(4,2)-k(1)*y(4);
jac(4,4)=jac(4,4)-k(1)*y(2);
jac(6,2)=jac(6,2)+k(1)*y(4);
jac(6,4)=jac(6,4)+k(1)*y(2);
jac(3,2)=jac(3,2)+k(1)*y(4);
jac(3,4)=jac(3,4)+k(1)*y(2);

% rule    : A(x[_] y[.]), B(y[.]), . -> A(x[_] y[1]), B(y[1]), C()
% reaction: A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[.]) + A(x[1] y[.]), B(x[1] y[.]) -> C() + A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[6]), B(x[7] y[6]), A(x[7] y[.])

jac(1,1)=jac(1,1)-k(1)*y(4);
jac(1,4)=jac(1,4)-k(1)*y(1);
jac(4,1)=jac(4,1)-k(1)*y(4);
jac(4,4)=jac(4,4)-k(1)*y(1);
jac(5,1)=jac(5,1)+k(1)*y(4);
jac(5,4)=jac(5,4)+k(1)*y(1);
jac(3,1)=jac(3,1)+k(1)*y(4);
jac(3,4)=jac(3,4)+k(1)*y(1);

% rule    : A(x[_] y[.]), B(y[.]), . -> A(x[_] y[1]), B(y[1]), C()
% reaction: A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[.]) + A(x[1] y[.]), B(x[1] y[.]) -> C() + A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[6]), B(x[7] y[6]), A(x[7] y[.])

jac(1,1)=jac(1,1)-k(1)*y(4);
jac(1,4)=jac(1,4)-k(1)*y(1);
jac(4,1)=jac(4,1)-k(1)*y(4);
jac(4,4)=jac(4,4)-k(1)*y(1);
jac(5,1)=jac(5,1)+k(1)*y(4);
jac(5,4)=jac(5,4)+k(1)*y(1);
jac(3,1)=jac(3,1)+k(1)*y(4);
jac(3,4)=jac(3,4)+k(1)*y(1);

% rule    : A(x[_] y[.]), B(y[.]), . -> A(x[_] y[1]), B(y[1]), C()
% reaction: A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[.]) + A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[.]) -> C() + A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[6]), B(x[7] y[6]), A(x[7] y[8]), B(x[9] y[8]), A(x[9] y[.])

jac(2,2)=jac(2,2)-k(1)*y(4);
jac(2,4)=jac(2,4)-k(1)*y(2);
jac(4,2)=jac(4,2)-k(1)*y(4);
jac(4,4)=jac(4,4)-k(1)*y(2);
jac(6,2)=jac(6,2)+k(1)*y(4);
jac(6,4)=jac(6,4)+k(1)*y(2);
jac(3,2)=jac(3,2)+k(1)*y(4);
jac(3,4)=jac(3,4)+k(1)*y(2);

% rule    : A(x[_] y[.]), B(y[.]), . -> A(x[_] y[1]), B(y[1]), C()
% reaction: A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[6]), B(x[7] y[6]), A(x[7] y[.]) + A(x[1] y[.]), B(x[1] y[.]) -> C() + A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[6]), B(x[7] y[6]), A(x[7] y[8]), B(x[9] y[8]), A(x[9] y[.])

jac(1,1)=jac(1,1)-k(1)*y(5);
jac(1,5)=jac(1,5)-k(1)*y(1);
jac(5,1)=jac(5,1)-k(1)*y(5);
jac(5,5)=jac(5,5)-k(1)*y(1);
jac(6,1)=jac(6,1)+k(1)*y(5);
jac(6,5)=jac(6,5)+k(1)*y(1);
jac(3,1)=jac(3,1)+k(1)*y(5);
jac(3,5)=jac(3,5)+k(1)*y(1);

% rule    : A(x[_] y[.]), B(y[.]), . -> A(x[_] y[1]), B(y[1]), C()
% reaction: A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[6]), B(x[7] y[6]), A(x[7] y[.]) + A(x[1] y[.]), B(x[1] y[.]) -> C() + A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[6]), B(x[7] y[6]), A(x[7] y[8]), B(x[9] y[8]), A(x[9] y[.])

jac(1,1)=jac(1,1)-k(1)*y(5);
jac(1,5)=jac(1,5)-k(1)*y(1);
jac(5,1)=jac(5,1)-k(1)*y(5);
jac(5,5)=jac(5,5)-k(1)*y(1);
jac(6,1)=jac(6,1)+k(1)*y(5);
jac(6,5)=jac(6,5)+k(1)*y(1);
jac(3,1)=jac(3,1)+k(1)*y(5);
jac(3,5)=jac(3,5)+k(1)*y(1);

% rule    : A(x[_] y[.]), B(y[.]), . -> A(x[_] y[1]), B(y[1]), C()
% reaction: A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[.]) + A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[.]) -> C() + A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[6]), B(x[7] y[6]), A(x[7] y[.])

jac(2,2)=jac(2,2)-k(1)*y(2);
jac(2,2)=jac(2,2)-k(1)*y(2);
jac(2,2)=jac(2,2)-k(1)*y(2);
jac(2,2)=jac(2,2)-k(1)*y(2);
jac(5,2)=jac(5,2)+k(1)*y(2);
jac(5,2)=jac(5,2)+k(1)*y(2);
jac(3,2)=jac(3,2)+k(1)*y(2);
jac(3,2)=jac(3,2)+k(1)*y(2);

% rule    : A(x[_] y[.]), B(y[.]), . -> A(x[_] y[1]), B(y[1]), C()
% reaction: A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[.]) + A(x[1] y[.]), B(x[1] y[.]) -> C() + A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[.])

jac(1,1)=jac(1,1)-k(1)*y(2);
jac(1,2)=jac(1,2)-k(1)*y(1);
jac(2,1)=jac(2,1)-k(1)*y(2);
jac(2,2)=jac(2,2)-k(1)*y(1);
jac(4,1)=jac(4,1)+k(1)*y(2);
jac(4,2)=jac(4,2)+k(1)*y(1);
jac(3,1)=jac(3,1)+k(1)*y(2);
jac(3,2)=jac(3,2)+k(1)*y(1);

% rule    : A(x[_] y[.]), B(y[.]), . -> A(x[_] y[1]), B(y[1]), C()
% reaction: A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[.]) + A(x[1] y[.]), B(x[1] y[.]) -> C() + A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[4]), B(x[5] y[4]), A(x[5] y[.])

jac(1,1)=jac(1,1)-k(1)*y(2);
jac(1,2)=jac(1,2)-k(1)*y(1);
jac(2,1)=jac(2,1)-k(1)*y(2);
jac(2,2)=jac(2,2)-k(1)*y(1);
jac(4,1)=jac(4,1)+k(1)*y(2);
jac(4,2)=jac(4,2)+k(1)*y(1);
jac(3,1)=jac(3,1)+k(1)*y(2);
jac(3,2)=jac(3,2)+k(1)*y(1);

% rule    : A(x[_] y[.]), B(y[.]), . -> A(x[_] y[1]), B(y[1]), C()
% reaction: A(x[1] y[.]), B(x[1] y[.]) + A(x[1] y[.]), B(x[1] y[.]) -> C() + A(x[1] y[2]), B(x[1] y[.]), B(x[3] y[2]), A(x[3] y[.])

jac(1,1)=jac(1,1)-k(1)*y(1);
jac(1,1)=jac(1,1)-k(1)*y(1);
jac(1,1)=jac(1,1)-k(1)*y(1);
jac(1,1)=jac(1,1)-k(1)*y(1);
jac(2,1)=jac(2,1)+k(1)*y(1);
jac(2,1)=jac(2,1)+k(1)*y(1);
jac(3,1)=jac(3,1)+k(1)*y(1);
jac(3,1)=jac(3,1)+k(1)*y(1);
end


function obs=ode_obs(y)

global nobs
global var
obs=zeros(nobs,1);

t = y(7);
var(1)=y(3); % goal

obs(1)=t; % [T]
obs(2)=var(1); % goal

end


main();

