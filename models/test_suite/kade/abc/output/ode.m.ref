function main=main()
% command line: 
%      'KaDE' '../../cflows/abc/abc.ka' '-d' 'output' '-l' '1' '-p''0.1'
%% THINGS THAT ARE KNOWN FROM KAPPA FILE AND KaSim OPTIONS:
%% 
%% init - the initial abundances of each species and token
%% tinit - the initial simulation time (likely 0)
%% tend - the final simulation time 
%% initialstep - initial time step at the beginning of numerical integration
%% maxstep - maximal time step for numerical integration
%% reltol - relative error tolerance;
%% abstol - absolute error tolerance;
%% period - the time period between points to return
%%
%% variables (init(i),y(i)) denote numbers of embeddings 
%% rule rates are corrected by the number of automorphisms in the lhs of rules


tinit=0;
tend=1;
initialstep=1e-05;
maxstep=0.02;
reltol=0.001;
abstol=0.001;
period=0.1;
nonnegative=false;

global nodevar
nodevar=11;
global max_stoc_coef
max_stoc_coef=0;
nvar=11;
nobs=5;
nrules=6;

global var
var=zeros(nvar,1);
global init
init=sparse(nodevar,1);
stoc=zeros(nrules,max_stoc_coef);
global k
global kd
global kun
global kdun
global stoc

k=zeros(nrules,1);
kd=zeros(nrules,1);
kun=zeros(nrules,1);
kdun=zeros(nrules,1);
global jacvar
jacvar=sparse(nvar,nodevar);
global jack
global jackd
global jackun
global jackund
global jacstoc

jack=zeros(nrules,nodevar);
jackd=zeros(nrules,nodevar);
jackun=zeros(nrules,nodevar);
jackund=zeros(nrules,nodevar);

t = 0.000000;

init(11)=t;
var(8)=1000; % n_ab
var(10)=var(8);
init(3)=var(10);
init(2)=var(10);
var(7)=init(10); % Cpp
var(6)=init(7)+init(8)+init(9); % Cpu
var(9)=10000; % n_c
init(1)=var(9); % C(x1~u, x2~u)
var(5)=init(1)+init(6)+init(5); % Cuu
var(4)=init(4)+init(5)+init(9); % AB
var(3)=1; % mod_rate
var(2)=0.1; % off_rate
var(1)=0.001; % on_rate


uiIsOctave = false;
uiIsMatlab = false;
LIC = license('inuse');
for elem = 1:numel(LIC)
    envStr = LIC(elem).feature
    if strcmpi(envStr,'octave')
       LICname=envStr;
       uiIsOctave = true;
       break
    end
    if strcmpi(envStr,'matlab')
       LICname=envStr
       uiIsMatlab = true;
       break
    end
end


if nonnegative 
   options = odeset('RelTol', reltol, ...
                    'AbsTol', abstol, ...
                    'InitialStep', initialstep, ...
                    'MaxStep', maxstep, ...
                    'Jacobian', @ode_jacobian, ...
                   'NonNegative', [1:1:10]);
else
   options = odeset('RelTol', reltol, ...
                    'AbsTol', abstol, ...
                    'InitialStep', initialstep, ...
                    'MaxStep', maxstep, ...
                    'Jacobian', @ode_jacobian);
end


if nonnegative
   if uiIsMatlab
      soln =  ode15s(@ode_aux,[tinit tend],ode_init(),options);
      soln.y=soln.y';
      vt = soln.x;
      vy = soln.y;
   elseif uiIsOctave
      [vt,vy] = ode23s(@ode_aux,[tinit tend],ode_init(),options);
   end
else
   if uiIsMatlab
      soln =  ode15s(@ode_aux,[tinit tend],ode_init(),options);
      soln.y=soln.y';
      vt = soln.x;
      vy = soln.y;
   elseif uiIsOctave
      soln = ode2r(@ode_aux,[tinit tend],ode_init(),options);
      vt = soln.x;
      vy = soln.y;
   end
end;


nrows = length(vt);

tmp = zeros(nodevar,1);

n_points = floor ((tend-tinit)/period)+1;
t = linspace(tinit, tend, n_points);
obs = zeros(nrows,nobs);

for j=1:nrows
    for i=1:nodevar
        z(i)=vy(j,i);
    end
    h=ode_obs(z);
    for i=1:nobs
        obs(j,i)=h(i);
    end
end
if nobs==1
   y = interp1(vt, obs, t, 'pchip')';
else
   y = interp1(vt, obs, t, 'pchip');
end


filename = 'data.csv';
fid = fopen (filename,'w');
fprintf(fid,'# KaDE ../../cflows/abc/abc.ka -d output -l 1 -p 0.1\n')
fprintf(fid,'# ')
fprintf(fid,'[T],')
fprintf(fid,'AB,')
fprintf(fid,'Cuu,')
fprintf(fid,'Cpu,')
fprintf(fid,'Cpp,')
fprintf(fid,'\n')
for j=1:n_points
    for i=1:nobs
        fprintf(fid,'%f,',y(j,i));
    end
    fprintf(fid,'\n');
end
fclose(fid);


end



function Init=ode_init()

global nodevar
global init
Init=zeros(nodevar,1);

Init(1) = init(1); % C(x1~u, x2~u)
Init(2) = init(2); % B(x)
Init(3) = init(3); % A(x, c)
Init(4) = init(4); % A(x!1, c), B(x!1)
Init(5) = init(5); % A(x!1, c!2), B(x!1), C(x1~u!2, x2~u)
Init(6) = init(6); % A(x, c!1), C(x1~u!1, x2~u)
Init(7) = init(7); % C(x1~p, x2~u)
Init(8) = init(8); % A(x, c!1), C(x1~p, x2~u!1)
Init(9) = init(9); % A(x!1, c!2), B(x!1), C(x1~p, x2~u!2)
Init(10) = init(10); % C(x1~p, x2~p)
Init(11) = init(11); % t
end


function dydt=ode_aux(t,y)

global nodevar
global max_stoc_coef
global var
global k
global kd
global kun
global kdun
global stoc

var(7)=y(10); % Cpp
var(6)=y(7)+y(8)+y(9); % Cpu
var(5)=y(1)+y(6)+y(5); % Cuu
var(4)=y(4)+y(5)+y(9); % AB

k(1)=var(1);
k(2)=var(2);
k(3)=var(1);
k(4)=var(3);
k(5)=var(1);
k(6)=var(3);

dydt=zeros(nodevar,1);

% rule    : mod x1
% reaction: A(x, c!1), C(x1~u!1, x2~u) -> C(x1~p, x2~u) + A(x, c) 

dydt(6)=dydt(6)-k(4)*y(6);
dydt(3)=dydt(3)+k(4)*y(6);
dydt(7)=dydt(7)+k(4)*y(6);

% rule    : a.b
% reaction: A(x, c!1), C(x1~u!1, x2~u) + B(x) -> A(x!1, c!2), B(x!1), C(x1~u!2, x2~u) 

dydt(2)=dydt(2)-k(1)*y(2)*y(6);
dydt(6)=dydt(6)-k(1)*y(2)*y(6);
dydt(5)=dydt(5)+k(1)*y(2)*y(6);

% rule    : a.b_op
% reaction: A(x!1, c!2), B(x!1), C(x1~p, x2~u!2) -> A(x, c!1), C(x1~p, x2~u!1) + B(x) 

dydt(9)=dydt(9)-k(2)*y(9);
dydt(2)=dydt(2)+k(2)*y(9);
dydt(8)=dydt(8)+k(2)*y(9);

% rule    : mod x2
% reaction: A(x, c!1), C(x1~p, x2~u!1) -> C(x1~p, x2~p) + A(x, c) 

dydt(8)=dydt(8)-k(6)*y(8);
dydt(3)=dydt(3)+k(6)*y(8);
dydt(10)=dydt(10)+k(6)*y(8);

% rule    : a.b
% reaction: A(x, c!1), C(x1~p, x2~u!1) + B(x) -> A(x!1, c!2), B(x!1), C(x1~p, x2~u!2) 

dydt(2)=dydt(2)-k(1)*y(2)*y(8);
dydt(8)=dydt(8)-k(1)*y(2)*y(8);
dydt(9)=dydt(9)+k(1)*y(2)*y(8);

% rule    : a.c
% reaction: C(x1~p, x2~u) + A(x, c) -> A(x, c!1), C(x1~p, x2~u!1) 

dydt(3)=dydt(3)-k(5)*y(3)*y(7);
dydt(7)=dydt(7)-k(5)*y(3)*y(7);
dydt(8)=dydt(8)+k(5)*y(3)*y(7);

% rule    : mod x1
% reaction: A(x!1, c!2), B(x!1), C(x1~u!2, x2~u) -> C(x1~p, x2~u) + A(x!1, c), B(x!1) 

dydt(5)=dydt(5)-k(4)*y(5);
dydt(4)=dydt(4)+k(4)*y(5);
dydt(7)=dydt(7)+k(4)*y(5);

% rule    : a.b_op
% reaction: A(x!1, c!2), B(x!1), C(x1~u!2, x2~u) -> A(x, c!1), C(x1~u!1, x2~u) + B(x) 

dydt(5)=dydt(5)-k(2)*y(5);
dydt(2)=dydt(2)+k(2)*y(5);
dydt(6)=dydt(6)+k(2)*y(5);

% rule    : ab.c
% reaction: C(x1~u, x2~u) + A(x!1, c), B(x!1) -> A(x!1, c!2), B(x!1), C(x1~u!2, x2~u) 

dydt(4)=dydt(4)-k(3)*y(4)*y(1);
dydt(1)=dydt(1)-k(3)*y(4)*y(1);
dydt(5)=dydt(5)+k(3)*y(4)*y(1);

% rule    : a.b_op
% reaction: A(x!1, c), B(x!1) -> B(x) + A(x, c) 

dydt(4)=dydt(4)-k(2)*y(4);
dydt(3)=dydt(3)+k(2)*y(4);
dydt(2)=dydt(2)+k(2)*y(4);

% rule    : a.b
% reaction: B(x) + A(x, c) -> A(x!1, c), B(x!1) 

dydt(3)=dydt(3)-k(1)*y(3)*y(2);
dydt(2)=dydt(2)-k(1)*y(3)*y(2);
dydt(4)=dydt(4)+k(1)*y(3)*y(2);
dydt(11)=1;

end


function jac=ode_jacobian(t,y)

global nodevar
global max_stoc_coef
global jacvar
global var
global k
global kd
global kun
global kdun
global stoc

global jack
global jackd
global jackun
global jackund
global jacstoc

var(7)=y(10); % Cpp
var(6)=y(7)+y(8)+y(9); % Cpu
var(5)=y(1)+y(6)+y(5); % Cuu
var(4)=y(4)+y(5)+y(9); % AB

k(1)=var(1);
k(2)=var(2);
k(3)=var(1);
k(4)=var(3);
k(5)=var(1);
k(6)=var(3);
jacvar(7,10)=1;
jacvar(6,7)=1;
jacvar(6,8)=1;
jacvar(6,9)=1;
jacvar(5,1)=1;
jacvar(5,5)=1;
jacvar(5,6)=1;
jacvar(4,4)=1;
jacvar(4,5)=1;
jacvar(4,9)=1;


jac=sparse(nodevar,nodevar);

% rule    : mod x1
% reaction: A(x, c!1), C(x1~u!1, x2~u) -> C(x1~p, x2~u) + A(x, c) 

jac(6,6)=jac(6,6)-k(4);
jac(3,6)=jac(3,6)+k(4);
jac(7,6)=jac(7,6)+k(4);

% rule    : a.b
% reaction: A(x, c!1), C(x1~u!1, x2~u) + B(x) -> A(x!1, c!2), B(x!1), C(x1~u!2, x2~u) 

jac(2,2)=jac(2,2)-k(1)*y(6);
jac(2,6)=jac(2,6)-k(1)*y(2);
jac(6,2)=jac(6,2)-k(1)*y(6);
jac(6,6)=jac(6,6)-k(1)*y(2);
jac(5,2)=jac(5,2)+k(1)*y(6);
jac(5,6)=jac(5,6)+k(1)*y(2);

% rule    : a.b_op
% reaction: A(x!1, c!2), B(x!1), C(x1~p, x2~u!2) -> A(x, c!1), C(x1~p, x2~u!1) + B(x) 

jac(9,9)=jac(9,9)-k(2);
jac(2,9)=jac(2,9)+k(2);
jac(8,9)=jac(8,9)+k(2);

% rule    : mod x2
% reaction: A(x, c!1), C(x1~p, x2~u!1) -> C(x1~p, x2~p) + A(x, c) 

jac(8,8)=jac(8,8)-k(6);
jac(3,8)=jac(3,8)+k(6);
jac(10,8)=jac(10,8)+k(6);

% rule    : a.b
% reaction: A(x, c!1), C(x1~p, x2~u!1) + B(x) -> A(x!1, c!2), B(x!1), C(x1~p, x2~u!2) 

jac(2,2)=jac(2,2)-k(1)*y(8);
jac(2,8)=jac(2,8)-k(1)*y(2);
jac(8,2)=jac(8,2)-k(1)*y(8);
jac(8,8)=jac(8,8)-k(1)*y(2);
jac(9,2)=jac(9,2)+k(1)*y(8);
jac(9,8)=jac(9,8)+k(1)*y(2);

% rule    : a.c
% reaction: C(x1~p, x2~u) + A(x, c) -> A(x, c!1), C(x1~p, x2~u!1) 

jac(3,3)=jac(3,3)-k(5)*y(7);
jac(3,7)=jac(3,7)-k(5)*y(3);
jac(7,3)=jac(7,3)-k(5)*y(7);
jac(7,7)=jac(7,7)-k(5)*y(3);
jac(8,3)=jac(8,3)+k(5)*y(7);
jac(8,7)=jac(8,7)+k(5)*y(3);

% rule    : mod x1
% reaction: A(x!1, c!2), B(x!1), C(x1~u!2, x2~u) -> C(x1~p, x2~u) + A(x!1, c), B(x!1) 

jac(5,5)=jac(5,5)-k(4);
jac(4,5)=jac(4,5)+k(4);
jac(7,5)=jac(7,5)+k(4);

% rule    : a.b_op
% reaction: A(x!1, c!2), B(x!1), C(x1~u!2, x2~u) -> A(x, c!1), C(x1~u!1, x2~u) + B(x) 

jac(5,5)=jac(5,5)-k(2);
jac(2,5)=jac(2,5)+k(2);
jac(6,5)=jac(6,5)+k(2);

% rule    : ab.c
% reaction: C(x1~u, x2~u) + A(x!1, c), B(x!1) -> A(x!1, c!2), B(x!1), C(x1~u!2, x2~u) 

jac(4,4)=jac(4,4)-k(3)*y(1);
jac(4,1)=jac(4,1)-k(3)*y(4);
jac(1,4)=jac(1,4)-k(3)*y(1);
jac(1,1)=jac(1,1)-k(3)*y(4);
jac(5,4)=jac(5,4)+k(3)*y(1);
jac(5,1)=jac(5,1)+k(3)*y(4);

% rule    : a.b_op
% reaction: A(x!1, c), B(x!1) -> B(x) + A(x, c) 

jac(4,4)=jac(4,4)-k(2);
jac(3,4)=jac(3,4)+k(2);
jac(2,4)=jac(2,4)+k(2);

% rule    : a.b
% reaction: B(x) + A(x, c) -> A(x!1, c), B(x!1) 

jac(3,3)=jac(3,3)-k(1)*y(2);
jac(3,2)=jac(3,2)-k(1)*y(3);
jac(2,3)=jac(2,3)-k(1)*y(2);
jac(2,2)=jac(2,2)-k(1)*y(3);
jac(4,3)=jac(4,3)+k(1)*y(2);
jac(4,2)=jac(4,2)+k(1)*y(3);
end


function obs=ode_obs(y)

global nobs
global var
obs=zeros(nobs,1);

t = y(11);
var(7)=y(10); % Cpp
var(6)=y(7)+y(8)+y(9); % Cpu
var(5)=y(1)+y(6)+y(5); % Cuu
var(4)=y(4)+y(5)+y(9); % AB

obs(1)=t; % [T]
obs(2)=var(4); % AB
obs(3)=var(5); % Cuu
obs(4)=var(6); % Cpu
obs(5)=var(7); % Cpp

end


main();

