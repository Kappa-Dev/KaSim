(* This is a mirror of pe5Arvaises result when ocaml is upgraded
   this should be replaced by.  It is expected than non error
   message will decide how best to relay its messages.
*)
type ('ok,'error) result_data <ocaml from module="Result_util" t="t"> = abstract

type range <ocaml from module="Locality"> = abstract

type severity =
     [ Error <json name="error">
     | Warning <json name="warning">
     | Info <json name="info"> ]
(* Range in this case is optional to support
   non parsing errors.
*)
type message =
     { severity : severity ;
       text     : string ;
       range    : range nullable } <ocaml field_prefix="message_">
type errors = message list

(* Code here is the just the http code the int used here
   to prevent there being a dependency on the cohttp package.
   As there are success and failure codes the the response code
   is not part othe the data variant.
   *)
type ('ok,'code)  result =
     { result_data : ('ok,errors) result_data;
       result_code : 'code }
(* Give a summary of the service.  The intention is to give the
   users an overview of the state of the kappa service.
*)
type environment_info = {
  projects :  int ;
  build : string ;
} <ocaml field_prefix="environment_">

type project_parameter = {
project_parameter_project_id <json name="project_id"> : string ; }


type site_graph <ocaml module="User_graph" t="connected_component"> = abstract

type nbr <ocaml module="Nbr" t="t"> = abstract
type overwritten_var =
{ var : string; val : nbr } <ocaml field_prefix="overwrite_">

type project_parse = {
  project_parse_project_version  <json name="project_version">: int ;
  project_parse_raw_ast <json name="boxed_ast">: string ;
}
type kappa_code = string
type simulation_seed = int

type simulation_id = string

type simulation_artifact = {
     simulation_artifact_simulation_seed : simulation_seed ;
}

type simulation_parameter = {
  plot_period : float ;
  pause_condition : string ;
  seed : simulation_seed nullable ;
  store_trace : bool ;
} <ocaml field_prefix="simulation_">

type simulation_perturbation = { perturbation_code : string }

type plot_limit = { plot_limit_offset <json name="offset"> : int nullable ;
                    plot_limit_points <json name="nb_points"> : int nullable ; }

type plot_parameter = plot_limit

type plot <ocaml module="Data"> = abstract

(* flux *)
type din_id = string
type din <ocaml module="Data"> = abstract

type din_catalog = { din_ids : din_id list }

(* file line *)
type file_line <ocaml predef module="Data"> =
     { name : string nullable;
       text : string <json name="text"> } <ocaml field_prefix="file_line_">
type file_line_catalog = { file_line_ids : string list }
type file_line_detail = file_line list

type snapshot_id = string
type snapshot <ocaml module="Data"> = abstract
type snapshot_detail = snapshot
type snapshot_catalog = { snapshot_ids : snapshot_id list }

(* log message *)
type log_message = string

(* info *)
type simulation_state = [ Running
                        | Paused
                        | Stopped ]

type ('plot,'dins,'file_lines,'snapshots,'log_messages)
     simulation_output
     = { simulation_output_plot : 'plot ;
         simulation_output_dins : 'dins ;
         simulation_output_file_lines : 'file_lines ;
         simulation_output_snapshots : 'snapshots;
         simulation_output_log_messages : 'log_messages; }

type simulation_info_output =
     (int,
      int,
      int,
      int,
      int)
     simulation_output

type simulation_progress = { simulation_progress_time : float;
                             simulation_progress_time_percentage : int nullable;
                             simulation_progress_event : int;
                             simulation_progress_event_percentage : int nullable;
                             simulation_progress_tracked_events : int nullable;
                             simulation_progress_is_running : bool ; }

type simulation_info = { simulation_info_progress : simulation_progress  ;
			 simulation_info_output : simulation_info_output; }

(* file *)
type client_id     = string
type local_version = { local_version_client_id <json name="client_id"> : client_id;
                       local_version_file_version : int ;
                     }
type file_version = local_version list
type file_id = string
type file_metadata = { compile <ocaml mutable>  : bool ;
                       id <ocaml mutable>       : file_id ;
                       position <ocaml mutable> : int ;
		       version <ocaml mutable>  : file_version ;
		       } <ocaml  field_prefix="file_metadata_">

type file_catalog = file_metadata list
type file = { file_metadata <ocaml mutable> <json name="metadata"> : file_metadata ;
              file_content <ocaml mutable> <json name="content"> : string ; }
type file_patch = {
     file_patch_start   : int nullable ; (* if not provided assume begining *)
     file_patch_end     : int nullable ; (* if not provided assume end of file *)
     file_patch_content : string       ; (* content to fill region with *)
     (* Replacing a file can be encoded by giving the content with out
        specifying a start or end. *)
}
type file_modification = {
     file_modification_version              : file_version ; (* version for update *)
     file_modification_compile  <json name="compile"> : bool nullable  ;
     file_modification_id       <json name="id"> : string nullable ;
     file_modification_position <json name="position"> : int nullable ;
     file_modification_patch    <json name="content"> : file_patch nullable ;
}
