(* This is a mirror of pe5Arvaises result when ocaml is upgraded
   this should be replaced by.  It is expected than non error
   message will decide how best to relay its messages.
*)
type unit_t = unit

type ('ok,'error) result_data <ocaml from module="Result_util" t="t"> = abstract

type range <ocaml from module="Locality"> = abstract

type severity =
     [ Error <json name="error">
     | Warning <json name="warning">
     | Info <json name="info"> ]
(* Range in this case is optional to support
   non parsing errors.
*)
type message =
     { message_severity : severity <json name="severity"> ;
       message_text     : string <json name="text">;
       message_range    : range nullable  <json name="range"> }
type errors = message list

(* Code here is the just the http code the int used here
   to prevent there being a dependency on the cohttp package.
   As there are success and failure codes the the response code
   is not part othe the data variant.
   *)
type ('ok,'code)  result =
     { result_data : ('ok,errors) result_data;
       result_code : 'code }
(* Give a summary of the service.  The intention is to give the
   users an overview of the state of the kappa service.
*)
type environment_info = { environment_simulations : int <json name="simulations"> ;
                          environment_projects :  int  <json name="projects"> ;
                          environment_build : string <json name="build"> ; }

type workspace_id = string
type workspace_catalog = workspace_id list
type workspace_parameter = { workspace_id : workspace_id }
type workspace_info = unit

type project_id = string
type project_version = int

type project = { project_id : project_id ;
                 project_version : project_version ; }
type project_catalog = { project_list : project list }
type project_parameter = { project_parameter_project_id : project_id <json name="project_id"> ; }


type site = {
     site_name: string;
     site_links: (int * int) list;
     site_states: string list;
}

type site_node = {
     site_node_name: string;
     site_node_sites: site list <ocaml repr="array">;
}

type site_graph = site_node list <ocaml repr="array">
type project_parse = {
  project_parse_project_version : project_version <json name="project_version">;
  project_parse_raw_ast : string <json name="boxed_ast">;
}
type kappa_code = string
type simulation_seed = int

type simulation_id = string

type simulation_artifact = {
     simulation_artifact_simulation_id : simulation_id ;
     simulation_artifact_simulation_seed : simulation_seed ;
}

type simulation_parameter = {
  simulation_plot_period : float <json name="plot_period"> ;
  simulation_pause_condition : string <json name="pause_condition"> ;
  simulation_id : simulation_id <json name="simulation_id"> ;
  simulation_seed : simulation_seed nullable <json name="seed"> ;
  simulation_store_trace : bool <json name="store_trace"> ;
}

type simulation_perturbation = { perturbation_code : string }

type observable = float nullable list

type plot_limit = { plot_limit_offset : int nullable <json name="start_time"> ;
                    plot_limit_points : int nullable <json name="max_points"> ; }

type plot_parameter = { plot_parameter_plot_limit : plot_limit nullable <json name="plot_limit">  ; }

type plot = { plot_legend : string list <json name="legend"> ;
      	      plot_time_series : observable list <json name="time_series"> ; }

type plot_range  = { plot_range_begin : int ;
     		     plot_range_end : int ; }

type plot_detail = { plot_detail_plot : plot;
     		     plot_detail_range : plot_range nullable;
	             plot_detail_size : int ; }

(* flux *)
type flux_kind <ocaml from module="Primitives">= abstract
type flux_map_id = string
type flux_flux = float list <ocaml repr="array">
type flux_data <ocaml predef module="Data"> = {
     flux_name : flux_map_id;
     flux_kind : flux_kind;
     flux_start : float;
     flux_hits : int list <ocaml repr="array">;
     flux_fluxs : flux_flux list <ocaml repr="array">
}
type flux_map <ocaml predef module="Data"> =
     { flux_rules : string list <ocaml repr="array">;
       flux_data : flux_data;
       flux_end : float;
     }
type flux_map_catalog = { flux_map_ids : flux_map_id list }

(* file line *)
type file_line_id = string nullable <json name="name">
type file_line <ocaml predef module="Data"> =
     { file_line_name : file_line_id;
       file_line_text : string <json name="text"> }
type file_line_catalog = { file_line_ids : file_line_id list }
type file_line_detail = file_line list

(* snapshot *)
type snapshot_id = string
type ('agent,'token) generic_snapshot <ocaml predef module="Data"> = {
    snapshot_file : snapshot_id;
    snapshot_event : int;
    snapshot_time : float;
    snapshot_agents : 'agent list;
    snapshot_tokens : 'token list <ocaml repr="array">; }

type snapshot = ((int * site_graph),(float * string)) generic_snapshot
type snapshot_detail = snapshot
type snapshot_catalog = { snapshot_ids : snapshot_id list }

(* log message *)
type log_message = string

(* info *)
type simulation_state = [ Running
                        | Paused
                        | Stopped ]

type ('plot,'flux_maps,'file_lines,'snapshots,'log_messages)
     simulation_output
     = { simulation_output_plot : 'plot ;
         simulation_output_flux_maps : 'flux_maps ;
         simulation_output_file_lines : 'file_lines ;
         simulation_output_snapshots : 'snapshots;
         simulation_output_log_messages : 'log_messages; }

type simulation_info_output =
     (int,
      int,
      int,
      int,
      int)
     simulation_output

type simulation_progress = { simulation_progress_time : float;
                             simulation_progress_time_percentage : int nullable;
                             simulation_progress_event : int;
                             simulation_progress_event_percentage : int nullable;
                             simulation_progress_tracked_events : int nullable;
                             simulation_progress_is_running : bool ; }

type simulation_info = { simulation_info_progress : simulation_progress  ;
			 simulation_info_output : simulation_info_output; }

type simulation = { simulation_info : simulation_info nullable }

type simulation_detail_output =
     (plot nullable,
      flux_map list,
      file_line list,
      snapshot list,
      log_message)
     simulation_output

type simulation_detail = { simulation_detail_progress : simulation_progress ;
                           simulation_detail_output : simulation_detail_output ; }


(* file *)
type client_id     = string
type local_version = { local_version_client_id : client_id <json name="client_id"> ;
                       local_version_file_version : int ;
                     }
type file_version = local_version list
type file_id = string
type file_metadata = { file_metadata_compile <ocaml mutable>  : bool <json name="compile"> ;
                       file_metadata_hash <ocaml mutable>     : string nullable <json name="hash"> ;
                       file_metadata_id <ocaml mutable>       : file_id <json name="id"> ;
                       file_metadata_position <ocaml mutable> : int <json name="position"> ;
		       file_metadata_version <ocaml mutable>  : file_version <json name="version"> ; }

type file_catalog = { file_metadata_list : file_metadata list }
type file = { file_metadata <ocaml mutable> : file_metadata <json name="metadata"> ;
              file_content <ocaml mutable>  : string <json name="content"> ; }
type file_patch = {
     file_patch_start   : int nullable ; (* if not provided assume begining *)
     file_patch_end     : int nullable ; (* if not provided assume end of file *)
     file_patch_content : string       ; (* content to fill region with *)
     (* Replacing a file can be encoded by giving the content with out
        specifying a start or end. *)
}
type file_modification = { file_modification_version              : file_version ; (* version for update *)
                           file_modification_compile              : bool nullable  <json name="compile"> ;
                           file_modification_id                   : string nullable <json name="id"> ;
                           file_modification_position             : int nullable <json name="position"> ;
                           file_modification_patch                : file_patch nullable <json name="content"> ;
                           file_modification_hash <ocaml mutable> : string nullable <json name="hash"> ;
}
